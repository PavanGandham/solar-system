name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGODB_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongodb:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: ${{ vars.MONGODB_NON_PROD_USERNAME }}
          MONGO_PASSWORD: ${{ secrets.MONGODB_NON_PROD_PASSWORD }}
        strategy:
          matrix:
            nodejs_version: [18, 19, 20]
            operating_system: [ubuntu-latest, macos-latest]
            exclude:
              - nodejs_version: 18
              - operating_system: macos-latest
          
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

        # - name: Caching NPM Dependencies
        #   uses: actions/cache@v3
        #   with:
        #     path: node_modules
        #     key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}


        # - name: Install Dependencies
        #   run: npm install
    
        - name: Composite Action - Cache & Install NPM Packages
          uses: ./.github/custom-actions/npm-actions
          with:
            path-to-folder: node_modules

        - name: Unit Testing
          id: unit-testing-id
          run: npm test
          
        - name: Archive Test Result
          if: always()
          # if: failure() && (steps.unit-testing-id.outcome == 'failure' || steps.unit-testing-id.outcome == 'success')
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
      name: Code Coverage
      container: 
        image: node:18
      services:
        mongo-db:
          image: siddharth67/mongodb:non-prod
          options: 
              --name mongo
      env:
        MONGO_URI: 'mongodb://mongo:27017/superData'
        MONGO_USERNAME: ${{ vars.MONGODB_NON_PROD_USERNAME }}
        MONGO_PASSWORD: ${{ secrets.MONGODB_NON_PROD_PASSWORD }}
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: SetUp NodeJS Version - 18
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Caching NPM Dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      # - name: Install Dependencies
      #   run: npm install

      - name: Composite Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/npm-actions
        with:
          path-to-folder: node_modules

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

    reports-s3:
      needs: [code-coverage, unit-testing]
      name: AWS S3 - Upload Reports
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
      - name: Download Mocha Test Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Mocha-Test-Result

      - name: Download Code Coverage Artifact
        uses: actions/download-artifact@v3
        with:
          name: Code-Coverage-Result

      - name: Merge Test Files
        run: |
          ls -ltr
          mkdir reports-${{ github.sha }}
          mv corbetura-coverage.xml reports-${{ github.sha }}/
          mv test-results.xml reports-${{ github.sha }}/
          ls -ltr reports-${{ github.sha }}/

      - name: Upload to AWS S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: solar-system-reports-bucket
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
          SOURCE_DIR: 'reports-${{ github.sha }}'
          DEST_DIR: 'reports-${{ github.sha }}'

    docker:
      name: Containerization
      permissions:
        packages: write
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      steps:
      - name: CheckOut
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build for Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Test
        run: |
           docker images
           docker run --name solar-system-app -d \
           -p 3000:3000 \
           -e MONGO_URI=$MONGO_URI \
           -e MONGO_USERNAME=$MONGO_USERNAME \
           -e MONGO_PASSWORD=$MONGO_PASSWORD \
           ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

           export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
           echo $IP

           echo Testing Image URL using wget
           wget -q -o - 127.0.0.1:3000/live | grep live

      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
             ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
             ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: ./.github/workflows/reuse-deplyment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGODB_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: development
        k8s-manifest-dir: kubernetes/development/

    dev-integration-testing:
      if: contains(github.ref, 'feature/')
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
      - name: Test URL Output Using Curl and Jq
        env:
          URL: ${{ needs.dev-deploy.outputs.application-url}}
        run: |
          echo $URL
          echo -----------------------------------------------------
          curl https://$URL/live -s -k | jq -r .status | grep -i live
          
    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: ./.github/workflows/reuse-depoyment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGODB_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: production
        k8s-manifest-dir: kubernetes/production/

    prod-integration-testing:
      if: github.ref == 'refs/heads/main'
      name: Prod Integration Testing
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
      - name: Test URL Output Using Curl and Jq
        env:
          URL: ${{ needs.prod-deploy.outputs.application-url}}
        run: |
          echo $URL
          echo -----------------------------------------------------
          curl https://$URL/live -s -k | jq -r .status | grep -i live

    slack-notification:
      if: always()
      name: Slack Notification
      needs: [dev-integration-testing, prod-integration-testing]
      continue-on-error: true
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}     # Add Slack webhook in github repo secrets
          SLACK_CHANNEL: github-actions-channel
          SLACK_COLOR: ${{ job.status }}    # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://gitlab.com/sidd-harth/solar-system/-/raw/main/images/saturn.png
          SLACK_MESSAGE: ':hammer_and_wrench; Triggered By ${{ github.actor }}'
          SLACK_TITLE: Information